openapi: 3.0.0
info:
    title: CrowPilot
    description: An API broker for using CrowdStrike via Security Copilot.
    version: 1.0.0
paths:
    /Instructions:
      get:
        summary: Instructions
        description: Use this to get examples on how to use CrowPilot
        responses:
          '200':
            description: Successful response
            content:
              text/plain:
                schema:
                    type: string
                    example: "Hello CrowPilot"
    /IncidentList:
      post:
        summary: Retrieve Incident List
        description: Retrieves a list of incidents based on a specified history period.
        requestBody:
          required: false
          content:
            application/json:
              schema:
                type: object
                properties:  
                  history:
                    type: integer
                    description: Number of days to look back for incidents.
                    example: 90
                  hostname:
                    type: string
                    description: A single hostname
                    example: "Crowdstronk"
                  status:
                    type: integer
                    description: The incident status as a number. 20 indicates New status, 25 indicates Reopened Status, 30 indicates in progress status, and 40 indicates closed status
                    enum:
                      - 20  # New
                      - 25  # Reopened
                      - 30  # In Progress
                      - 40  # Closed
                    example: 20
                  description:
                    type: string
                    description: A search string to look for in incident descriptions
                    example: "Privilege Escalation"
                  user:
                    type: string
                    description: a search string based on the username associated with an incident
                    example: "nbluth"
        responses:
          '200':
            description: List of incidents retrieved successfully.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    description: Incident details.
          '403':
            description: Unauthorized access.
    /IncidentDetails:
      post:
        summary: Retrieve Incident Details
        description: Retrieves details of specific incidents based on their IDs.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:  
                  ids:
                    type: string
                    description: comma separated list of incident ids
                    example: "incident_id_123, incident_id_234"
        responses:
          '200':
            description: Incident details retrieved successfully.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    description: Incident details.
          '403':
            description: Unauthorized access.
    /TrustScore:
      post:
        summary: Get Trust Score Information for host(s)
        description: Retrieves trust score information for individual assets
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:  
                  hostname:
                    type: string
                    description: list of one or more hostnames for a machine
                    example: "bbluth1, nbluth1"
        responses:
          '200':
            description: Host Information
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    description: Detailed information based on security posture of given hosts
          '403':
            description: Unauthorized access.
    /SearchHosts:
      post:
        summary: Search for a list of hosts by hostname 
        description: Retrieves host information and metadata based on a whole or partial hostname supplied.  You must supply the beginning of the hostname and will match rightward. 
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:  
                  hostname:
                    type: string
                    description: Search term of the full hostname or a fragment starting at the beginning of the hostname.  performs a right match on the hostname so you can supply one or more characters to search for
                    example: "bbluth"
        responses:
          '200':
            description: Host Information
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    description: Host details including its hardware, names, crowdstrike policies applied, status, bios, agents, and more
          '403':
            description: Unauthorized access.
    /HostInformation:
      post:
        summary: Get all known asset information about a specific hostname
        description: Retrieves all known information about a given host including its hardware, names, crowdstrike policies applied, status, bios, agents, and more
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:  
                  hostname:
                    type: string
                    description: list of one or more hostnames for a machine
                    example: "bbluth1, nbluth1"
        responses:
          '200':
            description: Host Information
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    description: Host details including its hardware, names, crowdstrike policies applied, status, bios, agents, and more
          '403':
            description: Unauthorized access.
    /OnDemandScan:
      post:
        summary: Create, cancel, report on, or check the status of a CrowdStrike On Demand Scan.
        description: If you need to run an on demand scan of a host, you need to give a hostname, and a scan will be created. If you need to cancel a scan, then you need to give the hostname and a scan_id to cancel a specific scan, otherwise if you provide just the hostname it will cancel all current scans associated with the host. Asking for a status and providing the hostname will give you the status of all scans for that host. If you need to know what malicious files were found on a host, you can ask for a on demand scan report and provide the hostname to get all files founds from all scans.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:  
                  hostname:
                    type: string
                    description: list of one hostname for a machine
                    example: "bbluth1"
                  action:
                    type: string
                    description: must be one of the following in lowercase - report, create, status, cancel
                    example: "bbluth1"
        responses:
          '200':
            description: On Deman Scan Response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    description: The response for the creation of a scan will give you the id, a scan_id and it's current state. The response for a status of an on demand scan will return every scan recorded for that host along with the number of files scanned, those quarantined, or malicious and the Status of each scan. The results for a cancel scan request will return the number of workstations effected, which will correspond to the number of scans that were cancelled, along with the specific scan_id in resources that was canceled. Lastly, the report response will give you the malicious files from each scan, including the filename, filepath, filehash and if it was quarantined for each file found to be malicious.
          '403':
            description: Unauthorized access.
    /HostPolicyChange:
      post:
        summary: Change what hardening policies apply to a given host in crowdstrike.  This will remove the host from all groups and then reassign the host to the requested group.
        description: This endpoint allows you to change the security policy group assigned to a host to increase or decrease security.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:  
                  hostname:
                    type: string
                    description: the hostname of the machine
                    example: "GobsDevBox"
                  hostgroup:
                    type: string
                    description: The name of the host group you'd like to assign the host to
                    example: "Windows-Gold-Policy"
        responses:
          '200':
            description: Successfully changed host group
          '403':
            description: Failed to change host group.
    /SystemHealthCheck:
      get:
        summary: Retrieve Prevention Policy and Exclusion Information 
        description: Provides an assessment of the crowdstrike configuration based on prevention policies and exclusions. Prevention policy is a key configuration component that determines how aggressive CrowdStrike's defenses are. The assessment will detail the best prevention poilcies, the worst prevention policies and the overall crowdstrike health based on the number of policies that are poor or ideal, and the number of exclusions. For exclusions, Folder exclusions are not good, and Global Folder exclusions are even worse. For determining the rating of a prevention policy, the most ideal policies have all settings as either 'enabled' or 'Extra Aggressive', and the worst prevention policies consisting mostly of 'disabled' settings.
        responses:
          '200':
            description: List of all prevention policies and counts of exclusions. AI should consider users initial request around summarizing results or making recommendations to improve.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    description: >
                      This object represents the configuration and status of security policies and exclusions applied to a system. It contains three main arrays: 'context_for_security_copilot', `exclusions` and `policies`.

                      **context_for_security_copilot**:
                      - A string that provides more details on what an assessment or health check response should include when responding to a user, and more information on scoring and what makes one policy better then another.

                      **Exclusions**:
                      - An array of objects detailing the count of exclusions applied globally and non-globally, scoped and folder-based.
                      - Example fields:
                        - `Global - Folder`: Number of global folder exclusions.
                        - `Global - Scoped`: Number of global scoped exclusions.
                        - `Not Global - Folder`: Number of non-global folder exclusions.
                        - `Not Global - Scoped`: Number of non-global scoped exclusions.
                        - `Exclusion Count`: Total count of exclusions.

                      **Policies**:
                      - An array of objects representing various security policies applied to the system. Each policy object includes:
                        - `Name`: The name of the policy.
                        - `Host Count`: Number of hosts affected by the policy.
                        - `Possible Points`: Maximum possible points for the policy.
                        - `points`: Points scored by the policy.
                        - `score`: Percentage score of the policy.
                        - **Cloud Machine Learning**: Configuration for cloud-based machine learning features, such as anti-malware detection and prevention.
                        - **Sensor Machine Learning**: Configuration for sensor-based machine learning features, such as adware detection and prevention.
                        - **Enhanced Visibility**: Visibility settings for various protocols and system components (e.g., HTTP, memory, filesystem).
                        - **Execution Blocking**: Settings for blocking suspicious processes, scripts, and commands.
                        - **Exploit Mitigation**: Features to mitigate exploitation attempts (e.g., ASLR, DEP).
                        - **Exploitation Behavior**: Detection of exploitation activities (e.g., code injection, drive-by downloads).
                        - **Firmware**: Visibility into firmware-level activities.
                        - **Quarantine**: Settings for quarantining malicious files or processes.
                        - **Ransomware**: Protection against ransomware activities (e.g., file encryption, backup deletion).
                        - **Remediation**: Advanced remediation capabilities.
                        - **User-Mode Capabilities**: Features for user-mode protection (e.g., tampering protection, executable detection).

                      Each policy object may also include specific configurations for Microsoft Office files, on-demand scans, lateral movement detection, and unauthorized remote access IOAs.

                      Example:
                      - A policy named `platform_default` may have `Cloud Machine Learning` features disabled, `points` set to 0, and `score` set to 0.0.
                      - Another policy named `Win - Prod - Standard` may have aggressive settings for `Cloud Machine Learning`, `Sensor Machine Learning`, and `Ransomware` protection, with a high score and points.

                      This structure allows for detailed tracking and management of security configurations across multiple systems.
                      This description provides a clear and comprehensive overview of the JSON structure for use in an OpenAPI specification. Let me know if you need further refinements!
          '403':
            description: Unauthorized access.
    /ActionOnHost:
      post:
        summary: Take an action on a host
        description: Within crowdstrike allows the following actions on a host - 'contain' This action contains the host, which stops any network communications to locations other than the CrowdStrike cloud and IPs specified in your containment policy 'detection_suppress' - Supress detections for the host. detection_unsuppress Allow detections for the host 'lift_containment' - This action lifts containment on the host, which returns its network communications to normal 'hide_host' - This action will delete a host. After the host is deleted, no new detections for that host will be reported via UI or APIs 'unhide_host' - This action will restore a host. Detection reporting will resume after the host is restored
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:  
                  hostname:
                    type: string
                    description: list of one or more hostnames for a machine
                    example: "bbluth1, nbluth1"
                  action:
                    type: string
                    description: must be one of the following in lowercase - contain, lift_containment, detection_suppress, detection_unsuppress, hide_host, unhide_host
                    example: "contain"
        responses:
          '200':
            description: Status information
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    description: Status of host
          '403':
            description: Unauthorized access.
    /BlockIoc:
      post:
        summary: Perform a global block for an indicator of compromise
        description: |-
          Create a new IOC by providing a JSON object that includes these key/value pairs:

          **type** (required): The type of the indicator. Valid values:

          - sha256: A hex-encoded sha256 hash string. Length - min: 64, max: 64.

          - md5: A hex-encoded md5 hash string. Length - min 32, max: 32.

          - domain: A domain name. Length - min: 1, max: 200.

          - ipv4: An IPv4 address. Must be a valid IP address.

          - ipv6: An IPv6 address. Must be a valid IP address.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:  
                  description:
                    type: string
                    description: description of the indicator being blocked
                    example: "Malicious IP address"
                  comment:
                    type: string
                    description: comment from individual creating the block, such as why its being created.
                    example: "this ioc was observed brute forcing logins"
                  value:
                    type: string
                    description: value of the IOC indicator of compromise.  It must be a valid ipv4 or ipv4 address, or a sha256 file hash, an md5 file hash, or a domain like example.com
                    example: "199.199.199.199"
                  type:
                    type: string
                    description: what specific type of IOC this is.  It may be 
                    enum:
                      - ipv4  
                      - ipv6  
                      - sha256  
                      - md5  
                      - domain
                    example: "ipv4"
                  severity:
                    type: string
                    description: low, medium, high - if unsure use high or do not use
                    enum:
                      - high  
                      - medium  
                      - low  
                    example: "high"
        responses:
          '200':
            description: IOC Blocking success
          '403':
            description: Unauthorized access.
    /UnblockIoc:
      delete:
        summary: Remove a block (unblock) an indicator of compromise (IOC)
        description: |-
          Remove an IOC by providing the value of the IOC and a comment for why it's being removed
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:  
                  comment:
                    type: string
                    description: comment from individual creating the block, such as why its being created.
                    example: "this ioc was observed brute forcing logins"
                  value:
                    type: string
                    description: value of the IOC indicator of compromise.  It must be a valid ipv4 or ipv4 address, or a sha256 file hash, an md5 file hash, or a domain like example.com
                    example: "199.199.199.199"
        responses:
          '200':
            description: IOC Unblocking success
          '403':
            description: Unauthorized access.
    /PreventionPolicyGroups:
      post:
        summary: Get a list of the host group and it's associated platform name that are not dynamic groups, that a prevention policy applies to.
        description: This endpoint uses a prevention policy name and will find all the host groups that a user can move a host into. This will not return dynamic host groups only static host groups.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:  
                  prevention_policy:
                    type: string
                    description: the prevention policy name to look up host groups for. If the prevention policy contains a space, the prevention_policy passed in will be truncated and only the characters before the space will be used, as there is a bug in CrowdStrikes API that doesnt allow for a space to be used in the search.
                    example: "My Policy - Test"
        responses:
          '200':
            description: Successfully looked up a list of host groups
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    description: an array of host_groups and any errors are returned. The host_groups array consists of objects that are the host group name and the platform name the host group is for.
                    example: "{'host_groups':[{'name':'Test Group 1', 'platform_name':'Windows','policy_name':'Windows Test Policy'},{'name':'Windows Prod Servers','platform_name':'Windows','policy_name':'Windows Prod Policy'},'errors':'','search_term':'Windows','copilot_instructions':'If the prevention_policy sent into CrowPilot had a space in it, the first word was grabbed and used as the search term, as CrowdStrike has a bug in their API that will not find an exact match of a prevention policy that has a space.'}"